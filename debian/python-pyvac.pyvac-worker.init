#!/bin/sh
### BEGIN INIT INFO
# Provides:          pyvac-worker
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start pyvac worker
# Description:       Pyvac worker system
### END INIT INFO

PATH=/usr/sbin:/usr/bin:/sbin:/bin

DAEMON=/usr/bin/pyvac_celeryd
NAME=pyvac-worker
DESC="Pyvac worker daemon"
LOGDIR=/var/log/$NAME

PIDFILE=/var/run/$NAME/$NAME.pid

test -x $DAEMON || exit 0

. /lib/lsb/init-functions

# Default options, these can be overriden by the information
# at /etc/default/$NAME
DAEMON_OPTS=""          # Additional options given to the server

DIETIME=10              # Time to wait for the server to die, in seconds
                        # If this value is set too low you might not
                        # let some servers to die gracefully and
                        # 'restart' will not work

STARTTIME=1             # Time to wait for the server to start, in seconds
                        # If this value is set each time the server is
                        # started (on start or restart) the script will
                        # stall to try to determine if it is running
                        # If it is not set and the server takes time
                        # to setup a pid file the log message might
                        # be a false positive (says it did not start
                        # when it actually did)

DAEMONUSER=root         # Users to run the daemons as. If this value
                        # is set start-stop-daemon will chuid the server

CONFFILE=/etc/gandi/pyvac.yaml

# Scheduling priorities
NICE=19

# Include defaults if available
if [ -f /etc/default/$NAME ] ; then
    . /etc/default/$NAME
fi

if [ "${RUN:-no}" != "yes" ]; then
    exit 0
fi

# Check that the user exists (if we set a user)
# Does the user exist?
if [ -n "$DAEMONUSER" ] ; then
    if getent passwd "$DAEMONUSER" > /dev/null; then
        # Obtain the uid
        DAEMONUID=`getent passwd "$DAEMONUSER" | awk -F : '{print $3}'`
    else
        log_failure_msg "The user $DAEMONUSER, required to run $NAME does not exist."
        exit 1
    fi
fi

# Check that the group exists (if we set a group)
# Does the group exist?
if [ -n "$DAEMONGROUP" ] ; then
    if getent group "$DAEMONGROUP" > /dev/null; then
        # Obtain the gid
        DAEMONGID=`getent group "$DAEMONGROUP" | awk -F : '{print $3}'`
    else
        log_failure_msg "The group $DAEMONGROUP, required to run $NAME does not exist."
        exit 1
    fi
elif [ -n "$DAEMONUSER" ] ; then
    # Fallback if the user is set in the conf but not the group
    DAEMONGID=`getent passwd "$DAEMONUSER" | awk -F : '{print $4}'`
fi


set -e

running_pid() {
# Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] && return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|sed -n '2p' |cut -d : -f 1`
    # Is this the expected server
    [ "$cmd" != "$name" ] && return 1
    return 0
}

running() {
# Check if the process is running looking at /proc
# (works for all users)

    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

start_server() {
    create_directories
# Start the process using the wrapper
    if [ -z "$DAEMONUSER" ] ; then
        start_daemon $DAEMON -- $DAEMON_OPTS
        errcode=$?
    else
# if we are using a daemonuser then change the user id
        [ -n "$DAEMONGROUP" ] && chuidarg="$DAEMONUSER:$DAEMONGROUP" \
                              || chuidarg="$DAEMONUSER"
        start-stop-daemon --start --quiet \
            --chuid $chuidarg \
            --make-pidfile --pidfile $PIDFILE \
            --background --nicelevel $NICE \
            --exec $DAEMON -- $DAEMON_OPTS
        errcode=$?
    fi
    return $errcode
}

stop_server() {
# Stop the process using the wrapper
    if [ -z "$DAEMONUSER" ] ; then
        killproc -p $PIDFILE $DAEMON
        errcode=$?
    else
# if we are using a daemonuser then look for process that match
        [ -n "$DAEMONGROUP" ] && groupopt="--group $DAEMONGROUP"
        start-stop-daemon --stop --quiet --pidfile $PIDFILE \
            --user $DAEMONUSER $groupopt
        errcode=$?
    fi
    return $errcode
}

force_stop() {
# Force the process to die killing it manually
    [ ! -e "$PIDFILE" ] && return
    if running ; then
        kill -15 $pid
    # Is it really dead?
        local i
        while [ $i -lt $DIETIME ]
        do
            sleep 1s
            if ! running ; then
                break
            fi
        done
        kill -9 $pid
        sleep "$DIETIME"s
        if running ; then
            echo "Cannot kill $NAME (pid=$pid)!"
            exit 1
        fi
    fi
    rm -f $PIDFILE
}

create_directories()
{
    PIDDIR=`dirname $PIDFILE`
    for dir in $PIDDIR $LOGDIR
    do
        [ ! -d "$dir" ] && mkdir -p $dir
        chown -R $DAEMONUID:$DAEMONGID $dir
        chmod 770 $dir
    done
}


case "$1" in
  start)
        log_daemon_msg "Starting $DESC " "$NAME"
        # Check if it's running first
        if running ; then
            log_progress_msg "apparently already running"
            log_end_msg 0
            exit 0
        fi
        if start_server ; then
            # NOTE: Some servers might die some time after they start,
            # this code will detect this issue if STARTTIME is set
            # to a reasonable value
            [ -n "$STARTTIME" ] && sleep $STARTTIME # Wait some time
            if  running ; then
                # It's ok, the server started and is running
                log_end_msg 0
            else
                # It is not running after we did start
                log_end_msg 1
            fi
        else
            # Either we could not start it
            log_end_msg 1
        fi
    ;;
  stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        if running ; then
            # Only stop the server if we see it running
            errcode=0
            stop_server || errcode=$?
            log_end_msg $errcode
        else
            # If it's not running don't do anything
            log_progress_msg "apparently not running"
            log_end_msg 0
            exit 0
        fi
    ;;
  force-stop)
        # First try to stop gracefully the program
        $0 stop
        if running; then
            # If it's still running try to kill it more forcefully
            log_daemon_msg "Stopping (force) $DESC" "$NAME"
            errcode=0
            force_stop || errcode=$?
            log_end_msg $errcode
        fi
    ;;
  restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        errcode=0
        stop_server || errcode=$?
        # Wait some sensible amount, some server need this
        [ -n "$DIETIME" ] && sleep $DIETIME
        start_server || errcode=$?
        [ -n "$STARTTIME" ] && sleep $STARTTIME
        running || errcode=$?
        log_end_msg $errcode
    ;;
  status)
        log_daemon_msg "Checking status of $DESC" "$NAME"
        if running ; then
            log_progress_msg "running"
            log_end_msg 0
        else
            log_progress_msg "apparently not running"
            log_end_msg 1
            exit 1
        fi
    ;;
  reload)
        log_warning_msg "Reloading $NAME daemon: not implemented, as the daemon"
        log_warning_msg "cannot re-read the config file (use restart)."
    ;;
  *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|force-stop|restart|force-reload|status}" >&2
        exit 1
    ;;
esac

exit 0

